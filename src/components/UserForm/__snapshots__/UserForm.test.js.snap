// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserForm should render a snapshot with correct data passed in 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserForm />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Logo />,
        <h1
          className="form-title"
        >
          !
        </h1>,
        <form
          action=""
          className="user-info"
        >
          <input
            className="user-input"
            placeholder="name"
            type="text"
            value=""
          />
          <input
            className="user-input"
            placeholder="email"
            type="text"
            value=""
          />
          <input
            className="user-input"
            placeholder="password"
            type="password"
          />
          <Link
            replace={false}
            to="/home"
          >
            <button
              className="standard-btn light form-btn"
            />
          </Link>
        </form>,
        <h2>
          Already a user? Log in 
          <Link
            className="login-link"
            replace={false}
            to="/"
          >
            here
          </Link>
          .
        </h2>,
        <Link
          replace={false}
          to="/info"
        >
          <button
            className="info-btn"
          >
            i
          </button>
        </Link>,
      ],
      "className": "user-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            undefined,
            "!",
          ],
          "className": "form-title",
        },
        "ref": null,
        "rendered": Array [
          undefined,
          "!",
        ],
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "action": "",
          "children": Array [
            <input
              className="user-input"
              placeholder="name"
              type="text"
              value=""
            />,
            <input
              className="user-input"
              placeholder="email"
              type="text"
              value=""
            />,
            <input
              className="user-input"
              placeholder="password"
              type="password"
            />,
            <Link
              replace={false}
              to="/home"
            >
              <button
                className="standard-btn light form-btn"
              />
            </Link>,
          ],
          "className": "user-info",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "user-input",
              "placeholder": "name",
              "type": "text",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "user-input",
              "placeholder": "email",
              "type": "text",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "user-input",
              "placeholder": "password",
              "type": "password",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <button
                className="standard-btn light form-btn"
              />,
              "replace": false,
              "to": "/home",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "standard-btn light form-btn",
              },
              "ref": null,
              "rendered": null,
              "type": "button",
            },
            "type": [Function],
          },
        ],
        "type": "form",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Already a user? Log in ",
            <Link
              className="login-link"
              replace={false}
              to="/"
            >
              here
            </Link>,
            ".",
          ],
        },
        "ref": null,
        "rendered": Array [
          "Already a user? Log in ",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "here",
              "className": "login-link",
              "replace": false,
              "to": "/",
            },
            "ref": null,
            "rendered": "here",
            "type": [Function],
          },
          ".",
        ],
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <button
            className="info-btn"
          >
            i
          </button>,
          "replace": false,
          "to": "/info",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "i",
            "className": "info-btn",
          },
          "ref": null,
          "rendered": "i",
          "type": "button",
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Logo />,
          <h1
            className="form-title"
          >
            !
          </h1>,
          <form
            action=""
            className="user-info"
          >
            <input
              className="user-input"
              placeholder="name"
              type="text"
              value=""
            />
            <input
              className="user-input"
              placeholder="email"
              type="text"
              value=""
            />
            <input
              className="user-input"
              placeholder="password"
              type="password"
            />
            <Link
              replace={false}
              to="/home"
            >
              <button
                className="standard-btn light form-btn"
              />
            </Link>
          </form>,
          <h2>
            Already a user? Log in 
            <Link
              className="login-link"
              replace={false}
              to="/"
            >
              here
            </Link>
            .
          </h2>,
          <Link
            replace={false}
            to="/info"
          >
            <button
              className="info-btn"
            >
              i
            </button>
          </Link>,
        ],
        "className": "user-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              undefined,
              "!",
            ],
            "className": "form-title",
          },
          "ref": null,
          "rendered": Array [
            undefined,
            "!",
          ],
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "action": "",
            "children": Array [
              <input
                className="user-input"
                placeholder="name"
                type="text"
                value=""
              />,
              <input
                className="user-input"
                placeholder="email"
                type="text"
                value=""
              />,
              <input
                className="user-input"
                placeholder="password"
                type="password"
              />,
              <Link
                replace={false}
                to="/home"
              >
                <button
                  className="standard-btn light form-btn"
                />
              </Link>,
            ],
            "className": "user-info",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "user-input",
                "placeholder": "name",
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "user-input",
                "placeholder": "email",
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "user-input",
                "placeholder": "password",
                "type": "password",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <button
                  className="standard-btn light form-btn"
                />,
                "replace": false,
                "to": "/home",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "standard-btn light form-btn",
                },
                "ref": null,
                "rendered": null,
                "type": "button",
              },
              "type": [Function],
            },
          ],
          "type": "form",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Already a user? Log in ",
              <Link
                className="login-link"
                replace={false}
                to="/"
              >
                here
              </Link>,
              ".",
            ],
          },
          "ref": null,
          "rendered": Array [
            "Already a user? Log in ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "here",
                "className": "login-link",
                "replace": false,
                "to": "/",
              },
              "ref": null,
              "rendered": "here",
              "type": [Function],
            },
            ".",
          ],
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <button
              className="info-btn"
            >
              i
            </button>,
            "replace": false,
            "to": "/info",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "i",
              "className": "info-btn",
            },
            "ref": null,
            "rendered": "i",
            "type": "button",
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
